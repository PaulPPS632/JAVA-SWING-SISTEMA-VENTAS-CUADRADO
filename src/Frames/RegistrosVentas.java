/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Frames;

import ConexionMysql.queries;
import Utilitaries.Funcionalidades;
import Utilitaries.ProcesosAPI;
import Utilitaries.Producto;
import Utilitaries.Venta;
import Utilitaries.impresionExcel;
import Utilitaries.pruebaexcel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Paul
 */
public class RegistrosVentas extends javax.swing.JInternalFrame {
    private static ArrayList<String> SeriesDevolucion;
    private int id_vendedor;
    /**
     * Creates new form RegistrosVentas
     */
    public RegistrosVentas() {
        initComponents();
        CargarRegistros();
        Iniciar_Menu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MenuTabla = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnPDF = new javax.swing.JButton();
        btnAnular = new javax.swing.JButton();
        btnDevolucionTotal = new javax.swing.JButton();
        DevolucionParcial = new javax.swing.JButton();
        btnRegistrarPago = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnPDF1 = new javax.swing.JButton();
        btnGenerarFact = new javax.swing.JButton();
        cmbTipoDocumento = new javax.swing.JComboBox<>();
        txtCorrelativo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        cmbEstado = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btnFiltrar = new javax.swing.JButton();
        DateChooserInicio = new com.toedter.calendar.JDateChooser();
        DateChooserFinal = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnPDF2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(220, 220, 220));
        setClosable(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnPDF.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnPDF.setText("VER PDF");
        btnPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDFActionPerformed(evt);
            }
        });

        btnAnular.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnAnular.setText("ANULAR FACT");
        btnAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularActionPerformed(evt);
            }
        });

        btnDevolucionTotal.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnDevolucionTotal.setText("DEVOL. TOTAL");
        btnDevolucionTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolucionTotalActionPerformed(evt);
            }
        });

        DevolucionParcial.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        DevolucionParcial.setText("DEVOL. PARC.");
        DevolucionParcial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DevolucionParcialActionPerformed(evt);
            }
        });

        btnRegistrarPago.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnRegistrarPago.setText("REGIST. PAGO");
        btnRegistrarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarPagoActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnModificar.setText("MODIFICAR");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnPDF1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnPDF1.setText("ACT. TABLA");
        btnPDF1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDF1ActionPerformed(evt);
            }
        });

        btnGenerarFact.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnGenerarFact.setText("GENERAR FACT");
        btnGenerarFact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarFactActionPerformed(evt);
            }
        });

        cmbTipoDocumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NINGUNO", "FACTURA", "BOLETA" }));

        txtCorrelativo.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtCorrelativo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCorrelativoKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Documento:");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Cliente:");

        txtCliente.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtClienteKeyPressed(evt);
            }
        });

        cmbEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NINGUNO", "PENDIENTE", "PENDIENTE FACTURADO", "COMPLETADO FACT", "COMPLETADO LIBRE", "DEVUELTO TOTAL", "DEVUELTO PARCIAL", "FACTURA ANULADA", "COMPLETADO" }));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Estado:");

        btnFiltrar.setText("FILTRAR");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        DateChooserInicio.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        DateChooserFinal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("INICIO:");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("FINAL:");

        btnPDF2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnPDF2.setText("IMPRIMIR");
        btnPDF2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDF2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(6, 6, 6)
                        .addComponent(cmbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCorrelativo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DateChooserInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DateChooserFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnFiltrar)
                        .addGap(0, 127, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGenerarFact)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAnular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDevolucionTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DevolucionParcial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRegistrarPago)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPDF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPDF1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPDF2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnFiltrar)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCorrelativo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3))
                            .addComponent(DateChooserInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(DateChooserFinal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDevolucionTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(DevolucionParcial, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRegistrarPago, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPDF1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnGenerarFact, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPDF2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnAnular, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void Iniciar_Menu(){
        JMenuItem GENERAR_FACTURA = new JMenuItem("GENERAR FACTURA");
        JMenuItem ANULAR_FACTURA = new JMenuItem("ANULAR FACTURA");
        JMenuItem MODIFICAR = new JMenuItem("MODIFICAR");
        JMenuItem FUCIONAR_FACTURAS = new JMenuItem("FUCIONAR FACTURAS");
        JMenuItem DEVOLUCION_TOTAL = new JMenuItem("DEVOLUCION TOTAL");
        JMenuItem DEVOLUCION_PARCIAL = new JMenuItem("DEVOLUCION PARCIAL");
        JMenuItem REGISTRAR_PAGO = new JMenuItem("REGISTRAR PAGO");
        JMenuItem VER_PDF = new JMenuItem("VER PDF");
        
        MenuTabla.add(GENERAR_FACTURA);
        MenuTabla.addSeparator();
        MenuTabla.add(ANULAR_FACTURA);
        MenuTabla.addSeparator();
        MenuTabla.add(MODIFICAR);
        MenuTabla.addSeparator();
        MenuTabla.add(FUCIONAR_FACTURAS);
        MenuTabla.addSeparator();
        MenuTabla.add(DEVOLUCION_TOTAL);
        MenuTabla.addSeparator();
        MenuTabla.add(DEVOLUCION_PARCIAL);
        MenuTabla.addSeparator();
        MenuTabla.add(REGISTRAR_PAGO);
        MenuTabla.addSeparator();
        MenuTabla.add(VER_PDF);
        
        jTable1.setComponentPopupMenu(MenuTabla);
        GENERAR_FACTURA.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EJECUTAR_GENERAR_FACTURA();
            }
        });
        
        ANULAR_FACTURA.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EJECUTAR_ANULAR_FACTURA();
            }
        });
        
        MODIFICAR.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EJECUTAR_MODIFICAR();
            }
        });
        
        FUCIONAR_FACTURAS.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EJECUTAR_FUCIONAR_FACTURAS();
            }
        });
        
        DEVOLUCION_TOTAL.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EJECUTAR_DEVOLUCION_TOTAL();
            }
        });
        
        DEVOLUCION_PARCIAL.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EJECUTAR_DEVOLUCION_PARCIAL();
            }
        });
        
        REGISTRAR_PAGO.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EJECUTAR_REGISTRAR_PAGO();
            }
        });
        
        VER_PDF.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EJECUTAR_VER_PDF();
            }
        });
    }
    private void EJECUTAR_GENERAR_FACTURA(){
        int row = jTable1.getSelectedRow();
        if(row != -1){
            
            int valor = JOptionPane.showConfirmDialog(
                    null,
                    "ESTA SEGURO DE GENERAR UN NUEVO DOCUMENTO",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION
                );
            if(valor == JOptionPane.YES_OPTION){
                Venta nuevo = new Venta(Integer.parseInt(jTable1.getValueAt(row, 0).toString()));
                if(nuevo.getCorrelativo() != 1){
                    
                    if(nuevo.getEstadoVenta() == 7){
                        int valor1 = JOptionPane.showConfirmDialog(
                    null,
                    "ESTE REGISTRO YA CUENTA CON UN DOCUMENTO QUE FUE ANULADO ANTERIORMENTE, ESTAS SEGURO DE GENERAR EL DOCUMENTO",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION
                        );
                        if(valor1 == JOptionPane.YES_OPTION){
                            String NOTA = JOptionPane.showInputDialog(null,"INGRESA EL NOTA DEL DOCUMENTO:");
                            carga pant = new carga();
                            Thread ejecucion = new Thread (){
                              @Override
                              public void run(){
                                  EJECUTARGENERAR(nuevo, NOTA);
                                  pant.dispose();
                              }
                            };
                            Thread pantallacarga = new Thread(){
                                @Override
                                public void run(){
                                    Funcionalidades.CentrarVentana(frmPrincipal.tbn_escritorio, pant);
                                }
                            };
                            ejecucion.start();
                            pantallacarga.start();
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "ESTE DOCUMENTO YA TIENE UN DOCUMENTO");
                    }
                    
                }else{
                    String NOTA = JOptionPane.showInputDialog(null,"INGRESA EL NOTA DEL DOCUMENTO:");
                    carga pant = new carga();
                    Thread ejecucion = new Thread (){
                      @Override
                      public void run(){
                          EJECUTARGENERAR(nuevo, NOTA);
                          pant.dispose();
                      }
                    };
                    Thread pantallacarga = new Thread(){
                        @Override
                        public void run(){
                            Funcionalidades.CentrarVentana(frmPrincipal.tbn_escritorio, pant);
                        }
                    };
                    ejecucion.start();
                    pantallacarga.start();
                }
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "SELECCIONA UN REGISTRO");
        }
    }
    private void EJECUTAR_ANULAR_FACTURA(){
        int row = jTable1.getSelectedRow();
        Venta nuevo = new Venta(Integer.parseInt(jTable1.getValueAt(row, 0).toString()));
        if(row != -1){
        if(nuevo.getCorrelativo() != 1){
            int valor = JOptionPane.showConfirmDialog(
                    null,
                    "ESTA SEGURO DE ANULAR ESTE DOCUMENTO",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION
                );
            if(valor == JOptionPane.YES_OPTION){
                String motivo = JOptionPane.showInputDialog(null,"INGRESA EL MOTIVO:");
                int id_razonsocial = JoptionPaneComboboxRazonSocial();
                if(id_razonsocial != -1){
                    if(nuevo.AnulacionAPI(motivo, id_razonsocial + 1)){
                        JOptionPane.showMessageDialog(null, "FACTURA ELIMINADA CORRECTAMENTE");
                        queries.querieUpdate("UPDATE venta SET id_estadoventa = 7 where id_venta = " + nuevo.getId_venta());
                        CargarRegistros();
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "SELECCIONA UNA RAZON SOCIAL");
                }
                
            }
        }else{
                JOptionPane.showMessageDialog(null, "ESTE REGISTRO NO TIENE UN DOCUMENTO ASOCIADO");
        }
        }else{
            JOptionPane.showMessageDialog(null, "SELECCIONA UN REGISTRO");
        }
    }
    private void EJECUTAR_MODIFICAR(){
        int row = jTable1.getSelectedRow();
        int valor = JOptionPane.showConfirmDialog(
                    null,
                    "ESTA SEGURO DE MODIFICAR",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION
                );
        if(valor == JOptionPane.YES_OPTION && row != -1){
            Venta nuevo = new Venta(Integer.parseInt(jTable1.getValueAt(row, 0).toString()));
            frmVentas ventana = new frmVentas(nuevo);
            ventana.setID_vendedor(id_vendedor);
            Funcionalidades.CentrarVentana(frmPrincipal.tbn_escritorio, ventana);
        } 
    }
    private void EJECUTAR_FUCIONAR_FACTURAS(){
        if(jTable1.getSelectedRowCount() >= 2){
            boolean val = true;
            int[] seleccionados = jTable1.getSelectedRows();
            ArrayList<Producto> lista = new ArrayList<Producto>();
            Venta prm = new Venta(Integer.parseInt(jTable1.getValueAt(seleccionados[0], 0).toString()));
            int id_clt = prm.getId_clienteproveedor();
            int id_estado = prm.getEstadoVenta();
            
            for(int index : seleccionados){
                int id = Integer.parseInt(jTable1.getValueAt(index, 0).toString());
                Venta nueva = new Venta(id);
                if(nueva.getId_clienteproveedor() != id_clt) {
                    JOptionPane.showMessageDialog(null, "SOLO SE PUEDE FUNCIONAR REGISTROS DEL MISMO CLIENTE");
                    val = false;
                    break;
                }
                if(nueva.getEstadoVenta() != id_estado){
                    JOptionPane.showMessageDialog(null, "SOLO SE PUEDE FUNCIONAR REGISTROS DE ESTADO PENDIENTE");
                    val = false;
                    break;
                }
            }
            if(val){
                boolean continua = true;
                for (int index : seleccionados) {
                    int id = Integer.parseInt(jTable1.getValueAt(index, 0).toString());
                    Venta nueva = new Venta(id);

                    for (Producto prd_comparar : nueva.getLista()) {
                        boolean encontrado = false;

                        // Buscar si ya existe un Producto con el mismo id en la lista
                        for (Producto prdlista : lista) {
                            if (prdlista.getId_producto() == prd_comparar.getId_producto()) {
                                // Ya existe, agregar las series al Producto existente
                                for (String sn : prd_comparar.getSeries()) {
                                    prdlista.InsertarSN(sn);
                                }
                                encontrado = true;
                                break;  // Salir del bucle interior porque ya encontramos el Producto
                            }
                        }

                        // Si no se encontró un Producto con el mismo id, agregarlo a la lista
                        if (!encontrado) {
                            lista.add(prd_comparar);
                        }
                    }
                    nueva.DevolucionTotal();
                    nueva.anular_registro_venta();
                }
                if(continua){
                    frmVentas frm = new frmVentas(prm);
                    frm.setId_venta(0);
                    frmVentas.setLista(lista);
                    frmVentas.Render();
                    Funcionalidades.CentrarVentana(frmPrincipal.tbn_escritorio, frm);
                }
                CargarRegistros();
            }
            
            
        }else{
            JOptionPane.showMessageDialog(null, "SELECCIONA AL MENOS 2 REGISTROS");
        }
    }
    private void EJECUTAR_DEVOLUCION_TOTAL(){
        int row = jTable1.getSelectedRow();
        int ID = Integer.parseInt(jTable1.getValueAt(row, 0).toString());
        int valor1 = JOptionPane.showConfirmDialog(
                    null,
                    "ESTAS SEGURO DE REALIZAR UNA DEVOLUCION TOTAL PARA ESTE REGISTRO",
                    "ADVERTENCIA",
                    JOptionPane.YES_NO_OPTION
                );
        
        if(valor1 == JOptionPane.YES_OPTION){
            Venta nueva = new Venta(ID);
            
            if(nueva.getCorrelativo() != 1){
                int valor = JOptionPane.showConfirmDialog(
                        null,
                        "ESTE REGISTRO CUENTA CON UN DOCUMENTO ASOCIADO, DESEAS GENERAR NOTA DE CREDITO",
                        "ADVERTENCIA",
                        JOptionPane.YES_NO_OPTION
                    );
                if(valor == JOptionPane.YES_OPTION){
                    
                    String motivo = JOptionPane.showInputDialog(null,"INGRESA EL MOTIVO:");
                    //String[] documento = jTable1.getValueAt(row, 1).toString().split("-");
                    int id_razonsocial = JoptionPaneComboboxRazonSocial() +1;
                    nueva.GenerarNOTACREDITO(motivo, id_razonsocial);
                    /*
                    if(ProcesosAPI.GenerarAnulacion(nueva.getId_tipo_comprobante(), documento[0], nueva.getCorrelativo(), motivo)){
                        nueva.DevolucionTotal();
                        JOptionPane.showConfirmDialog(null, "LA FACTURA FUE ELIMINADA CORRECTAMENTE");
                        int valor2 = JOptionPane.showConfirmDialog(
                        null,
                        "ESTE REGISTRO CUENTA CON UN DOCUMENTO ASOCIADO, DESEAS ELIMINARLO",
                        "ADVERTENCIA",
                        JOptionPane.YES_NO_OPTION
                        );
                    }
                    */
                }else if(valor == JOptionPane.NO_OPTION){
                    nueva.DevolucionTotal();
                }
            }else{
                nueva.DevolucionTotal();
            }
            CargarRegistros();
        }
    }
    private void EJECUTAR_DEVOLUCION_PARCIAL(){
        int row = jTable1.getSelectedRow();
        
        if(row != -1){
            int valor = JOptionPane.showConfirmDialog(
                    null,
                    "ESTA SEGURO DE REALIZAR ESTA DEVOLUCION PARCIAL",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION
                );
            if(valor == JOptionPane.YES_OPTION){
                Venta vnt = new Venta(Integer.parseInt(jTable1.getValueAt(row,0).toString()));
                if(vnt.getCorrelativo() != 1){
                    int valor1 = JOptionPane.showConfirmDialog(
                    null,
                    "ESTE REGISTRO YA CUENTA CON UN DOCUMENTO ASOCIADO DESEAS REALIZAR UNA NOTA DE CREDITO DE ESTA",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION
                    );
                    if(valor1 == JOptionPane.YES_OPTION){
                        JOptionPane.showMessageDialog(null, "ESTA OPCION NO ESTA DISPONIBLE TODAVIA. SE CANCELA LA DEVOLUCION PARCIAL/nANULA LA FACTURA Y GENERALA NUEVAMENTE");
                    }
                }else{
                    ListarSN nuevo = new ListarSN();
                    nuevo.setAfectado(2);
                    nuevo.setId_venta_Afectada(Integer.parseInt(jTable1.getValueAt(row, 0).toString()));
                    nuevo.setVnt(vnt);
                    Funcionalidades.CentrarVentana(frmPrincipal.tbn_escritorio, nuevo);
                }
                
            }
        }else{
            JOptionPane.showMessageDialog(null, "SELECCIONA UN REGISTRO");
        }
    }
    private void EJECUTAR_REGISTRAR_PAGO(){
        int row = jTable1.getSelectedRow();
        int valor = JOptionPane.showConfirmDialog(
                    null,
                    "ESTA SEGURO DE REGISTRAR ESTE PAGO",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION
                );
        if(valor == JOptionPane.YES_OPTION && row != -1){
            int id = Integer.parseInt(jTable1.getValueAt(row, 0).toString());
            Venta vnt = new Venta(id);
            RegistrarPagoVenta nuevo = new RegistrarPagoVenta();
            
            nuevo.setId_venta(vnt.getId_venta());
            nuevo.setDeuda_actual(vnt.getDeuda_independiente());
            nuevo.CargarTabla();
            Funcionalidades.CentrarVentana(frmPrincipal.tbn_escritorio, nuevo);
        } 
    }
    private void EJECUTAR_VER_PDF(){
        int row = jTable1.getSelectedRow();
        if(row != -1){
            Venta nueva = new Venta(Integer.parseInt(jTable1.getValueAt(row, 0).toString()));
            if(nueva.getUrl_pdf() != null){
                Funcionalidades.goToURL(nueva.getUrl_pdf());
            }else{
                JOptionPane.showConfirmDialog(null, "NO CUENTA CON UN DOCUMENTO, NI VIGENTE, NI ANULADO");
            }
        }
    }
    private void btnPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDFActionPerformed
        // TODO add your handling code here:
        EJECUTAR_VER_PDF();
    }//GEN-LAST:event_btnPDFActionPerformed
    
    private void btnDevolucionTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolucionTotalActionPerformed
        // TODO add your handling code here:
        
        EJECUTAR_DEVOLUCION_TOTAL();
        
    }//GEN-LAST:event_btnDevolucionTotalActionPerformed
    
    private void btnAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularActionPerformed
        // TODO add your handling code here:
        EJECUTAR_ANULAR_FACTURA();
    }//GEN-LAST:event_btnAnularActionPerformed

    private void DevolucionParcialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DevolucionParcialActionPerformed
        // TODO add your handling code here:
        EJECUTAR_DEVOLUCION_PARCIAL();
        
    }//GEN-LAST:event_DevolucionParcialActionPerformed
    public static void RecargarRegistros(){
        CargarRegistros();
    }
    private void btnRegistrarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarPagoActionPerformed
        // TODO add your handling code here:
        EJECUTAR_REGISTRAR_PAGO();
    }//GEN-LAST:event_btnRegistrarPagoActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        EJECUTAR_MODIFICAR();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnPDF1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDF1ActionPerformed
        // TODO add your handling code here:
        CargarRegistros();
    }//GEN-LAST:event_btnPDF1ActionPerformed
    private int JoptionPaneComboboxRazonSocial(){
        String[] opciones = queries.querieReturnDatosColumnSinParam("select nombre from razonsocial",1);

        // Crear un JPanel que contenga el JComboBox
        JPanel panel = new JPanel();
        JLabel label = new JLabel("Selecciona una opción:");
        JComboBox<String> comboBox = new JComboBox<>(opciones);
        panel.add(label);
        panel.add(comboBox);

        // Mostrar el JOptionPane con el panel que contiene el JComboBox
        int result = JOptionPane.showConfirmDialog(null, panel, "Título del cuadro de diálogo", JOptionPane.OK_CANCEL_OPTION);
        int rpta = -1;
        // Verificar la opción seleccionada
        if (result == JOptionPane.OK_OPTION) {
            rpta = comboBox.getSelectedIndex();
        }
        return rpta;
    }
    private void EJECUTARGENERAR(Venta vent, String nota){
        
        int id_razonsocial = JoptionPaneComboboxRazonSocial() + 1;
        int correlativo = queries.querieReturnINT("select numero from correlativos where id_tipo_comprobante = ? and id_razonsocial = ?", new Object[]{vent.getId_tipo_comprobante(), id_razonsocial});
        vent.setCorrelativo(correlativo);
        if(id_razonsocial != -1){
            vent.GenerarFacturacionAPI(nota, id_razonsocial );
            CargarRegistros();
        }else{
            JOptionPane.showMessageDialog(null, "SELECCIONA UNA RAZON SOCIAL");
        }
    }
    private void btnGenerarFactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarFactActionPerformed
        // TODO add your handling code here:
        EJECUTAR_GENERAR_FACTURA();
    }//GEN-LAST:event_btnGenerarFactActionPerformed
    private void Filtrar(){
        String codigo;
        String estado;
        codigo = (cmbTipoDocumento.getSelectedIndex() == 1 ? "F001" : "B001");
        if(cmbTipoDocumento.getSelectedIndex() < 1){
            codigo = "";
        }
        codigo += txtCorrelativo.getText();
        estado = (cmbEstado.getSelectedIndex() < 1 ? "": cmbEstado.getSelectedItem().toString());
        SimpleDateFormat formatoFecha = new SimpleDateFormat("YYY-MM-DD");
        
        if(DateChooserInicio.getDate() == null && DateChooserFinal.getDate() != null){
            jTable1.setModel(queries.QueryReturnTable("call registroventafiltrado(?,?,?,?,?)", new Object[]{codigo, txtCliente.getText(), estado, DateChooserInicio.getMinSelectableDate(), DateChooserFinal.getDate()}));
        }else if(DateChooserInicio.getDate() != null && DateChooserFinal.getDate() == null){ 
            jTable1.setModel(queries.QueryReturnTable("call registroventafiltrado(?,?,?,?,?)", new Object[]{codigo, txtCliente.getText(), estado, DateChooserInicio.getDate(), DateChooserFinal.getMaxSelectableDate()}));
        }else if(DateChooserInicio.getDate() == null && DateChooserFinal.getDate() == null){
           jTable1.setModel(queries.QueryReturnTable("call registroventafiltrado(?,?,?,?,?)", new Object[]{codigo, txtCliente.getText(), estado, DateChooserInicio.getMinSelectableDate(), DateChooserFinal.getMaxSelectableDate()})); 
        }else if(DateChooserInicio.getDate() != null && DateChooserInicio.getDate() != null){
            jTable1.setModel(queries.QueryReturnTable("call registroventafiltrado(?,?,?,?,?)", new Object[]{codigo, txtCliente.getText(), estado,DateChooserInicio.getDate() , DateChooserFinal.getDate()}));
        }
        
    }
    private void txtCorrelativoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCorrelativoKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            Filtrar();
        }
    }//GEN-LAST:event_txtCorrelativoKeyPressed

    private void txtClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtClienteKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            Filtrar();
        }
    }//GEN-LAST:event_txtClienteKeyPressed

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
        // TODO add your handling code here:
        Filtrar();
    }//GEN-LAST:event_btnFiltrarActionPerformed

    private void btnPDF2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDF2ActionPerformed
        // TODO add your handling code here:
        try {
            impresionExcel.exportarExcel(jTable1);
        } catch (IOException ex) {
            Logger.getLogger(RegistrosVentas.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnPDF2ActionPerformed
    public static void CargarRegistros(){
        jTable1.setModel(queries.QueryReturnTable("select * from registrosventas"));
        jTable1.setRowHeight(30);
        hidecolumn(0);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(200);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(200);
    }
    private static void hidecolumn(int column_index){
        TableColumn column = jTable1.getColumnModel().getColumn(column_index);
        column.setMinWidth(0);
        column.setMaxWidth(0);
        column.setWidth(0);
        column.setPreferredWidth(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DateChooserFinal;
    private com.toedter.calendar.JDateChooser DateChooserInicio;
    private javax.swing.JButton DevolucionParcial;
    private javax.swing.JPopupMenu MenuTabla;
    private javax.swing.JButton btnAnular;
    private javax.swing.JButton btnDevolucionTotal;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JButton btnGenerarFact;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnPDF;
    private javax.swing.JButton btnPDF1;
    private javax.swing.JButton btnPDF2;
    private javax.swing.JButton btnRegistrarPago;
    private javax.swing.JComboBox<String> cmbEstado;
    private javax.swing.JComboBox<String> cmbTipoDocumento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtCorrelativo;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the SeriesDevolucion
     */
    public static ArrayList<String> getSeriesDevolucion() {
        return SeriesDevolucion;
    }

    /**
     * @param aSeriesDevolucion the SeriesDevolucion to set
     */
    public static void setSeriesDevolucion(ArrayList<String> aSeriesDevolucion) {
        SeriesDevolucion = aSeriesDevolucion;
    }

    /**
     * @return the id_vendedor
     */
    public int getId_vendedor() {
        return id_vendedor;
    }

    /**
     * @param id_vendedor the id_vendedor to set
     */
    public void setId_vendedor(int id_vendedor) {
        this.id_vendedor = id_vendedor;
    }

}
